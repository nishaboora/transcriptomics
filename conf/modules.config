/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
    withName: '.*:TRIMGALORE:TRIMGALORE' {
            ext.args   = {
                [
                    "--fastqc_args '-t ${task.cpus}' ",
                    params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
                ].join(' ').trim()
            }
            publishDir = [
                [
                    path: { "${params.outdir}/quality_control/trimgalore/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/quality_control/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/quality_control/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ]
            ]
        }
         withName: HISAT2_EXTRACTSPLICESITES {
        ext.when = { params.module.split(',').contains('differential_expression') || params.tool.split(',').contains('ciriquant') }
        publishDir = [
            path: { "${params.outdir}/references/index/hisat2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
           // enabled: params.save_reference
        ]
    }

    withName: HISAT2_BUILD {
        ext.when = { params.module.split(',').contains('differential_expression') || params.tool.split(',').contains('ciriquant') }
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
         //   enabled: params.save_reference
        ]
    }

    withName: STAR_GENOMEGENERATE {
        ext.when = { !params.star && params.module.split(',').contains('circrna_discovery') && ( params.tool.split(',').contains('circexplorer2') || params.tool.split(',').contains('dcc') || params.tool.split(',').contains('circrna_finder') ) }
        ext.args = [ "",
            params.sjdboverhang ? "--sjdbOverhang ${params.sjdboverhang}" : '',
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            // enabled: params.save_reference
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
